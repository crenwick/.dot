call plug#begin()

" -----------------------------------------------------
" Language agnostic plugins
" -----------------------------------------------------

" Snippets support
" Snippets live in `/myUltiSnippets`
Plug 'SirVer/ultisnips'
let g:UltiSnipsSnippetsDir='~/.vim'
let g:UltiSnipsSnippetDirectories=['myUltiSnippets']
" Commenter
Plug 'https://github.com/tomtom/tcomment_vim'
" splitjoin (`gS` and `gJ`)
Plug 'https://github.com/AndrewRadev/splitjoin.vim'
" ACP Forked
Plug 'https://github.com/jordwalke/AutoComplPop'
let g:acp_ignorecaseOption = 1

" -----------------------------------------------------
" Javascript
" -----------------------------------------------------

" Javascript-Indent
Plug 'https://github.com/pangloss/vim-javascript'
" Javascript-Indent
Plug 'git://github.com/vim-scripts/JavaScript-Indent.git'
" jsx
Plug 'https://github.com/mxw/vim-jsx'
let g:jsx_ext_required = 0
" VimJSDocSnippets
Plug 'jordwalke/VimJSDocSnippets'
let g:JSDocSnippetsMapping='<D-C>'
" rainbow parantheses
Plug 'junegunn/rainbow_parentheses.vim'
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
augroup rainbow_js
  autocmd!
  autocmd FileType javascript,js,jsx,es6 RainbowParentheses
augroup END

" -----------------------------------------------------
" HTML/CSS
" -----------------------------------------------------

" Less
Plug 'git://github.com/groenewege/vim-less.git'
" Better Markdown
Plug 'https://github.com/tpope/vim-markdown.git'

" -----------------------------------------------------
" Interface improvement
" -----------------------------------------------------

" NERDTree
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeFind', 'NERDTreeToggle'] }
" nice arrow
let g:NERDTreeDirArrows = 1
" not so much cruft
let g:NERDTreeMinimalUI = 1
let g:NERDTreeShowBookmarks = 1
hi def link NERDTreeRO Normal
hi def link NERDTreePart StatusLine
hi def link NERDTreeDirSlash Directory
hi def link NERDTreeCurrentNode Search
hi def link NERDTreeCWD Normal
" Not so much color
let g:NERDChristmasTree = 0
" NERDTreeSideBar
Plug 'https://github.com/jistr/vim-nerdtree-tabs'
" don't auto open NERDTree
let g:nerdtree_tabs_open_on_gui_startup = 1
" Unite (Files, Buffers, Commands, etc. fuzzy searcher)
Plug 'Shougo/unite.vim'
" A lighterweight Powerline
Plug 'https://github.com/jordwalke/vim-airline'
let g:airline_powerline_fonts = 1
set laststatus=2
" Disable truncation
let g:airline#extensions#default#section_truncate_width = {}
" Custom Resizing for SplitBalancer
Plug 'jordwalke/VimSplitBalancer'
" GUndo
" Visualize a tree of your document history
Plug 'http://github.com/sjl/gundo.vim.git'
nnoremap <D-U> :GundoToggle<CR>
let g:gundo_close_on_revert=1
" Ctrl-p
Plug 'git://github.com/kien/ctrlp.vim.git'
" splliting right after helps preserver left nav
set splitright
" jump to exisiting buffer on any open command
let g:ctrlp_switch_buffer='ETVH'
" search for nearest ancestor like .git, .hg,
" else the directory of the current file
let g:ctrlp_working_path_mode = 'a'
" show the match window at the top of the screen
let g:ctrlp_match_window_bottom = 1
" enable caching
let g:ctrlp_use_caching = 1
" speed up by not removing clearing cache evertime
let g:ctrlp_clear_cache_on_exit=0
" show me dotfiles
let g:ctrlp_show_hidden = 1
" number of recently opened files
let g:ctrlp_mruf_max = 250
let g:ctrlp_max_depth = 7
let g:ctrlp_max_files = 30000

" -----------------------------------------------------
" External tools intergration plugins
" -----------------------------------------------------

" FuGITive
Plug 'tpope/vim-fugitive'

" -----------------------------------------------------
" Text insertion/manipulation
" -----------------------------------------------------

" Surround (cs"')
Plug 'tpope/vim-surround'
" Use arrow keys in block mode to move things around
Plug 'gavinbeatty/dragvisuals.vim'
vmap  <expr>  <LEFT>   DVB_Drag('left')
vmap  <expr>  <RIGHT>  DVB_Drag('right')
vmap  <expr>  <DOWN>   DVB_Drag('down')
vmap  <expr>  <UP>     DVB_Drag('up')
" Remove any introduced trailing whitespace after moving
let g:DVB_TrimWS = 1

" -----------------------------------------------------
" Colorschemes
" -----------------------------------------------------

" Collection of Clean Vim ColorSchemes with Airline Themes
Plug 'jordwalke/VimCleanColors'
" Solarized
Plug 'git://github.com/altercation/vim-colors-solarized'
" default value is 1
let g:solarized_underline=0
" default value is 16
let g:solarized_termcolors=256
" default value is normal
let g:solarized_contrast='high'
" default value is normal
let g:solarized_visibility='high'
" Flatlandia (for MacVim)
Plug 'git://github.com/jordwalke/flatlandia'
" Web Dev Icons
Plug 'https://github.com/ryanoasis/vim-webdevicons'
let g:WebDevIconsUnicodeDecorateFolderNodes = 0
let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
let g:WebDevIconsNerdTreeAfterGlyphPadding = '  '

" -----------------------------------------------------
" Dependencies
" -----------------------------------------------------

" Async processing (for Unite)
Plug 'Shougo/vimproc.vim', { 'do': 'make' }
" Allow plugins to tap into repeating
Plug 'tpope/vim-repeat'

" -----------------------------------------------------
" Other
" -----------------------------------------------------

" Bootstrap for Vim
Plug 'tpope/vim-sensible'
" AutoMakeDirectory if Needed
Plug 'jordwalke/VimAutoMakeDirectory'
" Thumbnail
Plug 'itchyny/thumbnail.vim'
" Go to Left when closing like everything else in the world
Plug 'jordwalke/VimCloser'
" SmartGUITabs
Plug 'jordwalke/MacVimSmartGUITabs'
" Make sure to have `set guioptions+=e` in your `.gvimrc`.
map <D-Cr> :SmartGUITabsToggleFullScreen<CR>
imap <D-Cr> <Esc>:SmartGUITabsToggleFullScreen<CR>
nmap <D-Cr> <Esc>:SmartGUITabsToggleFullScreen<CR>

" Smooth-Scroll
Plug 'terryma/vim-smooth-scroll'
" Normal mode
noremap <silent> <c-u> :call smooth_scroll#up(40, 20, 6)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(40, 20, 6)<CR>
" smooth_scroll is broken in visual mode currently - unmap
vnoremap <silent> <c-u> <c-u>
vnoremap <silent> <c-d> <c-d>

" Combine Previous Plugins For Modern Completion Experience
Plug 'jordwalke/VimCompleteLikeAModernEditor'
" tells the snippet system to look for custom snippets in ~/.vim/myUltiSnippets

" Parameter Text Objects
" ciP  (change in paramater  - changes the single argument under cursor!
Plug 'git://github.com/vim-scripts/Parameter-Text-Objects.git'

" Undo Quit of a window
Plug 'https://github.com/AndrewRadev/undoquit.vim'
map <D-T> <Esc>:Undoquit<CR>

Plug 'https://github.com/unblevable/quick-scope'

call plug#end()
