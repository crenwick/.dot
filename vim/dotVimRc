" crenwick dotVimRc
"
" Mac ProTips:
"  To further improve the text rendering on Mac OSX:
"  1. From the shell:
"    defaults write org.vim.MacVim MMCellWidthMultiplier 0.9
"  2. Opens all files from other apps in vert split:
"    defaults write org.vim.MacVim MMVerticalSplit YES
"  3. If when changing monitors, your fonts go from nice and thin to ugly and
"  bold: This should fix it:
"   defaults -currentHost write -globalDomain AppleFontSmoothing -int 1

filetype plugin on
filetype indent on

" Vundle Scripts
if has('vim_starting')
  if &compatible
    set nocompatible               " Be iMproved
  endif

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" sourcing before custom scripts can go here

set noswapfile        " Don't make backups.
set nowritebackup     " Even if you did make a backup, don't keep it around.
set nobackup

syntax on             " enable syntax highlighting

set title hlsearch history=500
set smartindent
set autoindent
set mouse=a           " click tabs, drag tabs, and drag split bars
set autoread          " reload files when changed on disk,
                      " i.e. via `git checkout`
set clipboard=unnamed " yank and paste with the system clipboard
set directory-=.      " don't store swapfiles in the current directory
set expandtab         " expand tabs to spaces
set ignorecase        " case-insensitive search
set smartcase         " case-sensitive search if any caps
set incsearch         " search as you type
" set laststatus=2      " always show status
set number            " show line numbers
set ruler             " show where you are
set scrolloff=5       " show context above/below cursor line
set sidescroll=1
set shiftwidth=2      " normal mode indentation commands uses 2 spaces
set softtabstop=2     " insert mode tab and backspace uses 2 spaces
set tabstop=2         " actual tab uses 8 spaces
set showmatch         " highlight matching on {[()]}
set list              " show trailing whitespace
set listchars=""
set listchars=tab:\ \
set listchars+=trail:.
set tabpagemax=30
set showcmd           " show current command going on
set wildignore=log/**,target/**
set wildmenu          " show a navigable menu for tab completion
set wildmode=longest,list,full
set hidden            " allow buffer to be hidden when writing to disk

" Mac Support bootstrap
set wildignore+=*.DS_Store
set wildignore+=*/_build**
set wildignore+=*/node_modules/**
set wildignore+=target/**
set wildignore+=tmp/**
set wildignore+=.meteor/local/**

set foldmethod=indent
set nofoldenable      " Remove ugly folds
" nofoldenable doesn't work in diff mode so do something similar
set diffopt=filler,context:9999

" Configure as Privacy Plugin
" All sensitive data is not stored in your ~/.vimrc folder
" Configure the spelling language and file.
set spelllang=en
set spellfile=$HOME/vim_spell/en.utf-8.add
" UndoDir:
let s:homeFolder = $HOME
let s:undoDir = s:homeFolder . '/vimUndo'
set undofile
set undolevels=500
set undoreload=500
" Create undo dir if needed - not in your dotVim folder! It should be local to
" your computer.
if !isdirectory(s:undoDir)
  call mkdir(s:undoDir)
endif
execute "set undodir=".s:undoDir
" Since your file/folder history may show up in a git commit!
let g:netrw_dirhistmax=0
" FIX SHELL
if &shell =~# 'fish$'
    set shell=sh
endif

" stackoverflow.com/questions/6852763/vim-quickfix-list-launch-files-in-new-tab
set switchbuf+=usetab,newtab

" set es to javascript syntax
au BufNewFile,BufReadPost *.es6 set filetype=javascript
au BufNewFile,BufReadPost *.json set filetype=javascript

" markdown with fenced code gets marked
au BufNewFile,BufReadPost *.md set filetype=markdown
let g:markdown_fenced_languages = [
  \ 'css',
  \ 'erb=eruby',
  \ 'javascript',
  \ 'js=javascript',
  \ 'json=javascript',
  \ 'ruby',
  \ 'sass',
  \ 'xml',
  \ 'html',
  \ 'sh' ]

" automatically reload vimrc when its saved
au BufWritePost .vimrc so ~/.vimrc

call plug#begin()
" SOURCE THE BUNDLE FILE HERE
source ~/.vim/bundlesBothVimRc
source ~/.vim/bundlesVimRc
call plug#end()

source ~/.vim/guiSettingsVimRc

" highlight the 81st character in each line
highlight MyLineTooLongMarker ctermbg=magenta guibg=Magenta
call matchadd('MyLineTooLongMarker', '\%81v', 100)

" source ~/.vim/keysVimRc

" highlight last inserted text
nnoremap gV `[v`]

" let mapleader=','
let mapleader = "\<Space>"

" keyboard shortcuts
" hjkl keys navigate buffer splits
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" buffer nav shortcuts
nnoremap <leader>b :ls<CR>
nnoremap <leader>H :bn<CR>
nnoremap <leader>L :bp<CR>

" to save all files
nnoremap <Leader>w :wa<CR>
" enter visual line mode:
nmap <Leader><Leader> V

" highlight the 80st character in each line
highlight MyLineTooLongMarker ctermbg=magenta guibg=Magenta
autocmd WinEnter * match MyLineTooLongMarker '\%81v'
" call matchadd('MyLineTooLongMarker', '\%80v', 100)

" requires :NERDTree and :NERDTreeTabs
nnoremap <leader>d :NERDTreeTabsToggle<CR>
nnoremap <leader>f :NERDTreeTabsFind<CR>

" requires :CtrlP
nnoremap <leader>t :CtrlP<CR>
nnoremap <leader>T :CtrlPClearCache<CR>:CtrlP<CR>

" requires fugitive
nnoremap <leader>gs :Gstatus<CR>

" TComment
"Toggle comment
"mapping to `gc` doesn't toggle one visually selected line - only multiples.
vmap <D-/> <c-_><c-_>
vmap <D-s-/> <c-_>b
nmap <D-/> gc$

" Get rid of trailing whitespace
nnoremap <leader>WW :%s/\s\+$//<CR>

" source ~/.vim/customFunctions.vim

" source ~/.vim/vimrc.custom.after

set shell=/bin/bash\ -li
